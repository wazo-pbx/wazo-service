#!/bin/bash
### BEGIN INIT INFO
# Provides:          xivo
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Should-Start:      $named
# Should-Stop:       $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: XiVO corporate telephony server
# Description:       Controls and starts XiVO and its services
### END INIT INFO

PATH=/bin:/usr/bin:/sbin:/usr/sbin
action=$1
services_filter=$2
include_monit=1
xivo_services="xivo-auth xivo-confgend xivo-dxtora xivo-provd xivo-agid asterisk xivo-amid xivo-call-logs xivo-agentd xivo-ctid xivo-dird xivo-dird-phoned xivo-ctid-ng"
default_services="dahdi xivo-sysconfd xivo-confd $xivo_services"
all_services="rabbitmq-server consul postgresql nginx $default_services"
monit_default="/etc/default/monit"
asterisk_default="/etc/default/asterisk"
XIVO_DEFAULT_FILE="/etc/default/xivo"
MAX_RETRY_SERVICE=30

# Support both argument passing conventions
[ "$services_filter" ] || services_filter=$OCF_RESKEY_services_filter
[ "$services_filter" ] || services_filter=default

if [ "$services_filter" = default ]; then
    services=$default_services
elif [ "$services_filter" = all ]; then
    services=$all_services
elif [ "$services_filter" = xivo ]; then
    services=$xivo_services
elif [ "$services_filter" = "xivo-nomonit" ]; then
    services=$xivo_services
    include_monit=0
else
    echo "Invalid service filter \"$services_filter\""
    usage
    exit 2 # same as OCF_ERR_ARGS
fi

reverse_list() {
    local service_list=$1
    /bin/echo $service_list | tac -s' '
}

reversed_services=$(reverse_list "$services")

usage() {
    cat <<-EOF
	usage : $0 action [services_filter]
	availables actions :
	    status     : print status of all xivo services
	    restart    : restart all xivo services
	    stop       : stop all xivo services
	    start      : start all xivo services
	    enable     : enable all xivo services
	    disable    : disable all xivo services

	availables services_filter :
	    xivo       : manage services only used on an active XiVO
	    default    : xivo + messaging and configuration
	    all        : default + web and database servers

	impacted services ($services_filter) : $services
	EOF

    exit 0
}

xivo_status() {
    local global_status=0
    xivo-check-db
    echo "Checking services..."
    for service in $services; do
        status=$(is_running "$service")
        if [ $status -eq 0 ]; then
            echo -e "\trunning\t\t$service"
        elif [ $status -eq 3 ]; then
            echo -e "\tstopped\t\t$service"
            if [ $global_status -eq 0 ]; then
                global_status=1
            fi
        else
            echo -e "\tfailed\t\t$service"
            global_status=2
        fi
    done
    return $global_status
}

xivo_enable() {
    echo "Enabling XiVO services..."
    echo startup=yes > $XIVO_DEFAULT_FILE
    enable_asterisk
    enable_monit
}

xivo_disable() {
    echo "Disabling XiVO services..."
    echo startup=no > $XIVO_DEFAULT_FILE
    disable_monit
    disable_asterisk
}

disable_asterisk() {
    sed -i 's/RUNASTERISK=yes/RUNASTERISK=no/' $asterisk_default
}

enable_asterisk() {
    sed -i 's/RUNASTERISK=no/RUNASTERISK=yes/' $asterisk_default
}

disable_monit() {
    sed -i 's/startup=1/startup=0/' $monit_default  # older monit
    sed -i 's/START=yes/START=no/' $monit_default
    update-rc.d monit disable &> /dev/null
}

stop_monit() {
    if [ $include_monit -eq 1 ]; then
        /etc/init.d/monit stop > /dev/null
    fi
}

enable_monit() {
    sed -i 's/startup=0/startup=1/' $monit_default  # older monit
    sed -i 's/START=no/START=yes/' $monit_default
    update-rc.d monit enable
}

start_monit() {
    if [ $include_monit -eq 1 ]; then
        /etc/init.d/monit start > /dev/null
    fi
}

close_sip_port() {
    echo "Closing port 5060."
    iptables -n --list | grep -q '^DROP.*5060'
    if [ $? -eq 1 ]; then
        iptables -I INPUT 1 -p udp --dport 5060 -j DROP
    fi
}

open_sip_port() {
    echo "Opening port 5060."
    iptables -n --list | grep -q '^DROP.*5060'
    if [ $? -eq 0 ]; then
        iptables -D INPUT -p udp --dport 5060 -j DROP
    fi
}

wait_for_service() {
    sleep 1
    echo -n "."
    _x=$(( $_x + 1 ))
    if [ $_x -eq $MAX_RETRY_SERVICE ]; then
        echo " NOK"
        echo "ERR: Stop after $_x retry."
        open_sip_port
        exit 1
    fi
}

is_enabled() {
    local service=$1
    enabled=0
    if [ $service = "asterisk" ]; then
        grep -q 'RUNASTERISK=yes' $asterisk_default
        enabled=$?
    fi
    for srv in $xivo_services; do
        if [ $srv != "asterisk" ]; then
            if [ $srv = $service ]; then
                grep -q 'startup=yes' $XIVO_DEFAULT_FILE
                enabled=$?
            fi
        fi
    done
    echo $enabled
}

is_running() {
    local service=$1
    local running=0
    if [ "$service" = "postgresql" ] ; then
        pg_state=$(pg_lsclusters | tail -n 1 | awk '{print $4}')
        if [ "$pg_state" != "online" ] ; then
            running=3
        fi
    else
        /etc/init.d/$service status >& /dev/null
        running=$?
    fi
    echo $running
}

start_services() {
    local services=$1
    for service in $services; do
        enabled=$(is_enabled $service)
        running=$(is_running $service)
        if [ $enabled -eq 0 ] && [ $running -ne 0 ] ; then
            if [ -f /etc/init.d/$service ]; then
                invoke-rc.d $service start > /dev/null
                echo -en "\tstarting $service ..."
                _x=0
                while [ $(is_running "$service") -ne 0 ]; do
                    wait_for_service
                done
                echo " OK"
            fi
        elif [ $enabled -ne 0 ]; then
            echo -e "\t$service is disabled"
        fi
    done
    start_monit
}

stop_services() {
    stop_monit
    local services=$1
    for service in $services; do
        running=$(is_running "$service")
        if [ $running -eq 0 ]; then
            if [  -f /etc/init.d/$service ]; then
                invoke-rc.d $service stop > /dev/null
            fi
        fi
    done
}

xivo_start_and_open() {
    local service_list=$1
    echo "Waiting for services to start successfully..."
    start_services "$service_list"
    open_sip_port
}

xivo_close_and_stop() {
    local service_list=$1
    close_sip_port
    echo "Waiting for services to stop successfully..."
    stop_services "$service_list"
}

xivo_start() {
    xivo_start_and_open "$services"
    echo "XiVO fully booted"
}

xivo_stop() {
    xivo_close_and_stop "$reversed_services"
}

xivo_restart() {
    xivo_stop
    xivo_start
}

case $action in
    status|monitor)  xivo_status;;
    force-reload|restart) xivo_restart;;
    start)   xivo_start;;
    stop)    xivo_stop;;
    enable)  xivo_enable;;
    disable) xivo_disable;;
    *) usage;;
esac
