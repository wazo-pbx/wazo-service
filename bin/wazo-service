#!/bin/bash
# Copyright 2018-2019 The Wazo Authors  (see the AUTHORS file)
# SPDX-License-Identifier: GPL-3.0-or-later

PATH=/bin:/usr/bin:/sbin:/usr/sbin
action=$1
services_filter=${2:-default}
include_monit=1
wazo_services="xivo-dxtora xivo-provd xivo-agid asterisk xivo-amid wazo-call-logd xivo-agentd wazo-dird wazo-dird-phoned wazo-calld wazo-websocketd wazo-chatd"
default_services="dahdi wazo-plugind wazo-webhookd xivo-sysconfd xivo-confgend xivo-confd wazo-auth $wazo_services"
all_services="rabbitmq-server consul postgresql nginx $default_services"
monit_default="/etc/default/monit"
wazo_disabled_file="/var/lib/wazo/disabled"
xivo_disabled_file="/var/lib/xivo/disabled"
xivo_home="/var/lib/xivo"

usage() {
    cat <<-EOF
	usage : $0 action [services_filter]
	availables actions :
	    status     : print status of all wazo services
	    restart    : restart all wazo services
	    stop       : stop all wazo services
	    start      : start all wazo services
	    enable     : enable all wazo services
	    disable    : disable all wazo services

	availables services_filter :
	    xivo       : manage services only used on an active Wazo
	    default    : xivo + messaging and configuration
	    all        : default + web and database servers

	impacted services ($services_filter) : $services
	EOF

    exit 0
}

if [ "$services_filter" = default ]; then
    services=$default_services
elif [ "$services_filter" = all ]; then
    services=$all_services
elif [ "$services_filter" = xivo ]; then
    services=$wazo_services
elif [ "$services_filter" = "xivo-nomonit" ]; then
    services=$wazo_services
    include_monit=0
else
    echo "Invalid service filter \"$services_filter\""
    usage
fi


reverse_list() {
    local service_list=$1
    /bin/echo $service_list | tac -s' '
}

reversed_services=$(reverse_list "$services")

wazo_status() {
    wazo-service-python status "$services_filter"
}

wazo_enable() {
    echo "Enabling Wazo services..."
    rm -f $wazo_disabled_file
    if [ -d $xivo_home ]; then
        rm -f $xivo_disabled_file
    fi
    enable_monit
}

wazo_disable() {
    echo "Disabling Wazo services..."
    touch $wazo_disabled_file
    if [ -d $xivo_home ]; then
        touch $xivo_disabled_file
    fi
    disable_monit
}

disable_monit() {
    sed -i 's/startup=1/startup=0/' $monit_default  # older monit
    sed -i 's/START=yes/START=no/' $monit_default
    # systemctl disable also updates sysv links via update-rc.d
    systemctl disable monit &> /dev/null
}

stop_monit() {
    if [ $include_monit -eq 1 ]; then
        service monit stop > /dev/null
    fi
}

enable_monit() {
    sed -i 's/startup=0/startup=1/' $monit_default  # older monit
    sed -i 's/START=no/START=yes/' $monit_default
    systemctl enable monit &> /dev/null
}

start_monit() {
    if [ $include_monit -eq 1 ]; then
        service monit start > /dev/null
    fi
}

close_sip_port() {
    echo "Closing port 5060."
    iptables -n --list | grep -q '^DROP.*5060'
    if [ $? -eq 1 ]; then
        iptables -I INPUT 1 -p udp --dport 5060 -j DROP
    fi
}

open_sip_port() {
    echo "Opening port 5060."
    iptables -n --list | grep -q '^DROP.*5060'
    if [ $? -eq 0 ]; then
        iptables -D INPUT -p udp --dport 5060 -j DROP
    fi
}

is_enabled() {
    local service=$1
    enabled=0
    if [ $service = "asterisk" ]; then
       test ! -f $wazo_disabled_file -a ! -f $xivo_disabled_file
       enabled=$?
    fi
    for srv in $wazo_services; do
        if [ $srv != "asterisk" ]; then
            if [ $srv = $service ]; then
               test ! -f $wazo_disabled_file -a ! -f $xivo_disabled_file
               enabled=$?
            fi
        fi
    done
    echo $enabled
}

is_running() {
    local service=$1
    local running=0
    if [ "$service" = "postgresql" ] ; then
        systemctl status postgresql@9.6-main.service > /dev/null
        running=$?
    else
        systemctl status $service > /dev/null
        running=$?
    fi
    echo $running
}

is_optional() {
    local service=$1
    if [ "$service" = "" ] ; then
        echo 0
    else
        echo 1
    fi
}

start_services() {
    local services=$1
    for service in $services; do
        if [ $service = postgresql ]; then
            service=postgresql@9.6-main
        fi
        optional=$(is_optional $service)
        enabled=$(is_enabled $service)
        running=$(is_running $service)
        if [ $enabled -eq 0 ] && [ $running -ne 0 ] ; then
            echo -en "\tstarting $service ..."
            if [ $optional -eq 0 ]; then
                if systemctl start $service 2> /dev/null; then
                    echo " OK"
                else
                    echo " ignored"
                fi
            else
                if ! systemctl start $service; then
                    echo " NOK"
                    open_sip_port
                    exit 1
                fi
                echo " OK"
            fi
        elif [ $enabled -ne 0 ]; then
            echo -e "\t$service is disabled"
        fi
    done
    start_monit
}

stop_services() {
    stop_monit
    local services=$1
    for service in $services; do
        if [ $service = postgresql ]; then
            service=postgresql@9.6-main
        fi

        optional=$(is_optional $service)
        if [ $optional -eq 0 ]; then
            systemctl stop $service 2> /dev/null
        else
            systemctl stop $service
        fi
    done
}

wazo_start_and_open() {
    local service_list=$1
    echo "Waiting for services to start successfully..."
    start_services "$service_list"
    open_sip_port
}

wazo_close_and_stop() {
    local service_list=$1
    close_sip_port
    echo "Waiting for services to stop successfully..."
    stop_services "$service_list"
}

wazo_start() {
    wazo_start_and_open "$services"
    echo "Wazo fully booted"
}

wazo_stop() {
    wazo_close_and_stop "$reversed_services"
}

wazo_restart() {
    wazo_stop
    wazo_start
}

if [ "$(basename "$0")" == 'xivo-service' ]; then
    echo 'Warning: xivo-service is a deprecated alias to wazo-service: use wazo-service instead' >&2
fi

case $action in
    status|monitor)  wazo_status;;
    force-reload|restart) wazo_restart;;
    start)   wazo_start;;
    stop)    wazo_stop;;
    enable)  wazo_enable;;
    disable) wazo_disable;;
    *) usage;;
esac
